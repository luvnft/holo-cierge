/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/concierge_m1.glb -o src/components/Avatar.jsx -k -r public

Alternative: https://gltf.pmnd.rs
*/

import React, { forwardRef, useEffect, useRef, useState, useCallback, useMemo } from "react";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import * as THREE from "three";
import { useChat } from "../hooks/useChat";
import avatarData from "../data/avatars.json";

const avatars = avatarData.avatars; // JSON data from avatars.json

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

const Avatar = forwardRef(({ thinking = false, onArmGesture, ...props }, ref) => {
  const [selectedAvatar, setSelectedAvatar] = useState("zoeDLM");
  const { message, onMessagePlayed, chat } = useChat();
  const [lipsync, setLipsync] = useState();
  const [isHappyIdle, setIsHappyIdle] = useState(false);
  const [facialExpression, setFacialExpression] = useState("default");
  const [animation, setAnimation] = useState(avatars[selectedAvatar].defaultPose);
  const audioRef = useRef(null);

  // Memoize the avatar model
  const avatarModel = useMemo(() => useGLTF(avatars[selectedAvatar].model), [selectedAvatar]);
  const { nodes, materials, scene } = avatarModel;

  const { animations } = useGLTF(avatars[selectedAvatar].animations);
  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);

  const playHappyIdle = useCallback(() => {
    setIsHappyIdle(true);
    const isHappy = Math.random() < 0.5;
    console.log("Estoy aburrida...");
    setAnimation(isHappy ? 'HappyIdle' : 'Bored');
    setFacialExpression(isHappy ? 'smile' : 'default');
    setTimeout(() => {
      setIsHappyIdle(false);
      setAnimation(avatars[selectedAvatar].defaultPose);
      setFacialExpression('default');
    }, 10000);
  }, [selectedAvatar]);

  // Handle happy idle scheduling
  useEffect(() => {
    const idleInterval = setInterval(() => {
      if (!isHappyIdle && !message) {
        playHappyIdle();
      }
    }, Math.random() * 20000 + 50000); // Random interval between 50-70 seconds

    return () => clearInterval(idleInterval);
  }, [isHappyIdle, playHappyIdle, message]);

  // Handle message changes
  useEffect(() => {
    if (!message) {
      setAnimation(avatars[selectedAvatar].defaultPose);
      return;
    }

    setAnimation(message.animation);
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);

    if (message.animation === "Presentation") {
      onArmGesture();
    }

    const audio = new Audio("data:audio/mp3;base64," + message.audio);
    audioRef.current = audio;
    audio.play();
    audio.onended = onMessagePlayed;

    return () => {
      audio.pause();
      audio.onended = null;
    };
  }, [message, onArmGesture, selectedAvatar]);

  // Handle animation changes
  useEffect(() => {
    const action = actions[animation]
      .reset()
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();

    if (animation !== avatars[selectedAvatar].defaultPose) {
      action.loop = THREE.LoopOnce;
      action.clampWhenFinished = true;
      mixer.addEventListener('finished', () => setAnimation(avatars[selectedAvatar].defaultPose));
    }

    return () => {
      action.fadeOut(0.5);
      mixer.removeEventListener('finished');
    };
  }, [animation, selectedAvatar, actions, mixer]);

  // Handle blinking
  const [blink, setBlink] = useState(false);
  useEffect(() => {
    const blinkInterval = setInterval(() => {
      setBlink(true);
      setTimeout(() => setBlink(false), 200);
    }, THREE.MathUtils.randInt(1000, 5000));

    return () => clearInterval(blinkInterval);
  }, []);

  // Frame update logic
  const lerpMorphTarget = useCallback((target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (index !== undefined && child.morphTargetInfluences[index] !== undefined) {
          child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
            child.morphTargetInfluences[index],
            value,
            speed
          );
        }
      }
    });
  }, [scene]);

  useFrame(() => {
    // Apply facial expressions
    Object.entries(facialExpressions[facialExpression] || {}).forEach(([key, value]) => {
      if (key !== "eyeBlinkLeft" && key !== "eyeBlinkRight") {
        lerpMorphTarget(key, value, 0.1);
      }
    });

    // Handle blinking
    lerpMorphTarget("eyeBlinkLeft", blink ? 1 : 0, 0.5);
    lerpMorphTarget("eyeBlinkRight", blink ? 1 : 0, 0.5);

    // Handle lipsync
    if (audioRef.current && lipsync) {
      const currentAudioTime = audioRef.current.currentTime;
      const currentMouthCue = lipsync.mouthCues.find(
        cue => currentAudioTime >= cue.start && currentAudioTime <= cue.end
      );

      if (currentMouthCue) {
        lerpMorphTarget(corresponding[currentMouthCue.value], 1, 0.2);
      }

      Object.values(corresponding).forEach(value => {
        if (!currentMouthCue || corresponding[currentMouthCue.value] !== value) {
          lerpMorphTarget(value, 0, 0.1);
        }
      });
    }
  });

  // Controls setup
  useControls("Avatars", {
    avatar: {
      options: Object.keys(avatars),
      onChange: setSelectedAvatar,
    },
  });

  const renderSkinnedMeshes = useCallback(() => {
    return Object.values(nodes)
      .filter(node => node.isSkinnedMesh)
      .map(node => (
        <skinnedMesh
          key={node.name}
          name={node.name}
          geometry={node.geometry}
          material={materials[node.material.name]}
          skeleton={node.skeleton}
          morphTargetDictionary={node.morphTargetDictionary}
          morphTargetInfluences={node.morphTargetInfluences}
        />
      ));
  }, [nodes, materials]);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      {renderSkinnedMeshes()}
    </group>
  );
});

Avatar.displayName = "Avatar";

export { Avatar };

// Preload avatar models and animations
Object.values(avatars).forEach(avatar => {
  useGLTF.preload(avatar.model);
  useGLTF.preload(avatar.animations);
});