/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/concierge_m1.glb -o src/components/Avatar.jsx -k -r public

Alternative: https://gltf.pmnd.rs
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { forwardRef, useEffect, useRef, useState, useCallback } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";
import avatarData from "../data/avatars.json";
import { Experience } from "./Experience";

const avatars = avatarData.avatars; // JSON data from avatars.json

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

const Avatar = forwardRef(({ thinking = false, onArmGesture, ...props }, ref) => {
  const [selectedAvatar, setSelectedAvatar] = useState("zoeDLM");
  const { message, onMessagePlayed, chat } = useChat();
  const [lipsync, setLipsync] = useState();

  const avatarModel = useGLTF(avatars[selectedAvatar].model);
  const [currentModel, setCurrentModel] = useState(avatarModel);
  const [isHappyIdle, setIsHappyIdle] = useState(false);
  const [isThinking, setIsThinking] = useState(thinking);



  const playHappyIdle = useCallback(() => {
    setIsHappyIdle(true);
    setAnimation('HappyIdle');
    setFacialExpression('smile');

    setTimeout(() => {
      setIsHappyIdle(false);
      setAnimation(avatars[selectedAvatar].defaultPose);
      setFacialExpression('default');
    }, 5000);
  }, [selectedAvatar]);

  /*useEffect(() => {
    const scheduleNextHappyIdle = () => {
      const randomDelay = Math.floor(Math.random() * (70000 - 50000) + 90000); // Random delay between 50-70 seconds
      return setTimeout(() => {
        if (!isHappyIdle && !message) {
          playHappyIdle();
        }
        scheduleNextHappyIdle(); // Schedule the next occurrence
      }, randomDelay);
    };

    const timeoutId = scheduleNextHappyIdle();

    return () => clearTimeout(timeoutId);
  }, [isHappyIdle, playHappyIdle, message]);*/

  useEffect(() => {
    setCurrentModel(avatarModel);

  }, [selectedAvatar, avatarModel]);

  const { nodes, materials, scene } = currentModel;

  useEffect(() => {
    console.log(message);
    if (!message) {
      setAnimation(avatars[selectedAvatar].defaultPose);
      return;
    }

    if (message.text === '¡Hola!' || message.text === 'Hola.') {
      setAnimation('Waving');
    } else if (message.text.replace(/^[¡!]|[.!]$/g, '').trim() === 'Estoy aquí para ayudarte') {
      setAnimation('Thankful');
    } else {
      setAnimation(message.animation);
    }
    if (message.animation === "Presentation") {
      onArmGesture();
    }
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);
    const audio = new Audio("data:audio/mp3;base64," + message.audio);
    audio.play();
    setAudio(audio);
    audio.onended = onMessagePlayed;
  }, [message, onArmGesture]);


  const { animations } = useGLTF(avatars[selectedAvatar].animations);

  useEffect(() => {
    setIsThinking(thinking);
    if (thinking) {
      setAnimation('ThinkingVeryLong');
      setFacialExpression('default');
    } else if (!message) {
      setAnimation(avatars[selectedAvatar].defaultPose);
      setFacialExpression('default');
    }
  }, [thinking, selectedAvatar]);

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === avatars[selectedAvatar].defaultPose) ? avatars[selectedAvatar].defaultPose : animations[0].name // Check if idle animation exists otherwise use first animation
  );
  useEffect(() => {
    if (animation === avatars[selectedAvatar].defaultPose) {
      // Play the default pose animation in a loop
      actions[animation]
        .reset()
        .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
        .play();
    } else {
      // Play non-default animations only once
      const action = actions[animation]
        .reset()
        .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
        .play();
      action.loop = THREE.LoopOnce;
      action.clampWhenFinished = true;

      // After the animation completes, return to the default pose
      mixer.addEventListener('finished', () => {
        setAnimation(avatars[selectedAvatar].defaultPose);
      });
    }
    return () => {
      actions[animation].fadeOut(0.5);
      mixer.removeEventListener('finished');
    };
  }, [animation, selectedAvatar]);
  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) { }
        }
      }
    });
  };

  const [blink, setBlink] = useState(false);
  //const [dance, setDance] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();

  useFrame(() => {
    !setupMode &&
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = facialExpressions[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });

    lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
    lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode) {
      return;
    }

    const appliedMorphTargets = [];
    if (message && lipsync) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
          break;
        }
      }
    }

    Object.values(corresponding).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(value, 0, 0.1);
    });

    if (!message && isHappyIdle) {
      Object.keys(facialExpressions['smile']).forEach((key) => {
        lerpMorphTarget(key, facialExpressions['smile'][key], 0.1);
      });
    }
  });

  useControls("Avatars", {
    avatar: {
      options: Object.keys(avatars),
      onChange: (value) => setSelectedAvatar(value),
    },
  });

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        const value =
          nodes.EyeLeft.morphTargetInfluences[
          nodes.EyeLeft.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();

    return () => {
      if (blinkTimeout) {
        clearTimeout(blinkTimeout);
      }
    };
  }, []);

  const renderSkinnedMeshes = () => {
    return Object.keys(nodes).map((key) => {
      const node = nodes[key];
      if (!node.isSkinnedMesh) {
        return null;
      }
      return (
        <skinnedMesh
          key={key}
          name={node.name}
          geometry={node.geometry}
          material={materials[node.material.name]}
          skeleton={node.skeleton}
          morphTargetDictionary={node.morphTargetDictionary}
          morphTargetInfluences={node.morphTargetInfluences}
        />
      );
    });
  };

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      {renderSkinnedMeshes()}
    </group>
  );
});

Avatar.displayName = "Avatar";

for (const key in avatars) {
  useGLTF.preload(avatars[key].model);
  useGLTF.preload(avatars[key].animations);
}

export { Avatar };